// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WebApiForHikka.Domain.Enums;
using WebApiForHikka.EfPersistence.Data;

#nullable disable

namespace WebApiForHikka.EfPersistence.Migrations
{
    [DbContext(typeof(HikkaDbContext))]
    [Migration("20240724012349_UpdateCommentReport")]
    partial class UpdateCommentReport
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresEnum(modelBuilder, "social_type", new[] { "website", "article", "book", "profile", "video.other", "video.movie", "video.episode", "video.tv_show", "music.song", "music.album", "music.playlist", "music.radio_station" });
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ae998d7-d8b1-4616-a0b3-60d29eca6c90"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("b1e76313-b130-44f8-ae76-6aff097064aa"),
                            Name = "User",
                            NormalizedName = "USER"
                        },
                        new
                        {
                            Id = new Guid("5bf717f2-e546-417f-b33a-40eab3eafc96"),
                            Name = "Banned",
                            NormalizedName = "BANNED"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.Commentable", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Commentable");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.Relation.AnimeRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FirstId")
                        .HasColumnType("uuid");

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<Guid>("SecondId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SecondId");

                    b.HasIndex("FirstId", "SecondId")
                        .IsUnique();

                    b.ToTable("AnimeRatings");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.Relation.CollectionAnime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FirstId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SecondId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SecondId");

                    b.HasIndex("FirstId", "SecondId")
                        .IsUnique();

                    b.ToTable("CollectionAnimes");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.Relation.CountryAnime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FirstId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SecondId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SecondId");

                    b.HasIndex("FirstId", "SecondId")
                        .IsUnique();

                    b.ToTable("CountryAnimes");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.Relation.DubAnime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FirstId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SecondId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SecondId");

                    b.HasIndex("FirstId", "SecondId")
                        .IsUnique();

                    b.ToTable("DubAnimes");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.Relation.Related", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FirstId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RelatedTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SecondId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RelatedTypeId");

                    b.HasIndex("SecondId");

                    b.HasIndex("FirstId", "SecondId")
                        .IsUnique();

                    b.ToTable("Relateds");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.Relation.Season", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FirstId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("SecondId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SecondId");

                    b.HasIndex("FirstId", "SecondId")
                        .IsUnique();

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.Relation.Similar", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FirstId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SecondId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SecondId");

                    b.HasIndex("FirstId", "SecondId")
                        .IsUnique();

                    b.ToTable("Similars");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.Relation.TagAnime", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("FirstId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SecondId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SecondId");

                    b.HasIndex("FirstId", "SecondId")
                        .IsUnique();

                    b.ToTable("TagAnimes");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.SeoAddition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(278)
                        .HasColumnType("character varying(278)");

                    b.Property<string>("Image")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("ImageAlt")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("SocialImage")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("SocialImageAlt")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("SocialTitle")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<SocialType?>("SocialType")
                        .HasColumnType("social_type");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("SeoAdditions");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<bool>("AllowAdult")
                        .HasColumnType("boolean");

                    b.Property<string>("AvatarPath")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("BackdropPath")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAtTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastSeenAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<string>("StatusIcon")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("StatusText")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<long?>("TelegramId")
                        .HasColumnType("bigint");

                    b.Property<string>("TelegramUrl")
                        .HasMaxLength(70)
                        .HasColumnType("character varying(70)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid>("UserSettingId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserSettingId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Collection", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("SeoAdditionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SeoAdditionId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("SeoAdditionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SeoAdditionId");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Dub", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Icon")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("SeoAdditionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SeoAdditionId");

                    b.ToTable("Dubs");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Format", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("SeoAdditionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SeoAdditionId");

                    b.ToTable("Formats");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Kind", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Hint")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("SeoAdditionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.HasIndex("SeoAdditionId");

                    b.ToTable("Kinds");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("Locale")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("SeoAdditionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SeoAdditionId");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.LanguageMediaplayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<long?>("EndEnding")
                        .HasColumnType("bigint");

                    b.Property<long?>("EndIntro")
                        .HasColumnType("bigint");

                    b.Property<Guid>("EpisodeId")
                        .HasColumnType("uuid");

                    b.Property<string>("FileId")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("FormatId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MediaplayerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SeoAdditionId")
                        .HasColumnType("uuid");

                    b.Property<long?>("StartEnding")
                        .HasColumnType("bigint");

                    b.Property<long?>("StartIntro")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.HasIndex("FormatId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MediaplayerId");

                    b.HasIndex("SeoAdditionId");

                    b.ToTable("LanguageMediaplayers");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Period", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<Guid>("SeoAdditionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SeoAdditionId");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.RestrictedRating", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Hint")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Icon")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<Guid>("SeoAdditionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SeoAdditionId");

                    b.ToTable("RestrictedRatings");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Source", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("SeoAdditionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SeoAdditionId");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Status", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid>("SeoAdditionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SeoAdditionId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Studio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Logo")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("SeoAdditionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SeoAdditionId");

                    b.ToTable("Studios");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<string>>("Alises")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("EngName")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<bool>("IsGenre")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SeoAdditionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("SeoAdditionId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithoutSeoAddition.AlternativeName", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnimeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(156)
                        .HasColumnType("character varying(156)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.ToTable("AlternativeNames");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithoutSeoAddition.AnimeBackdrop", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnimeId")
                        .HasColumnType("uuid");

                    b.Property<List<int>>("Colors")
                        .HasColumnType("integer[]");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.ToTable("AnimeBackdrops");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithoutSeoAddition.AnimeGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("AnimeGroups");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithoutSeoAddition.AnimeVideo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnimeVideoKindId")
                        .HasColumnType("uuid");

                    b.Property<string>("EmbedUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(156)
                        .HasColumnType("character varying(156)");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeVideoKindId");

                    b.ToTable("AnimeVideos");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithoutSeoAddition.AnimeVideoKind", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(156)
                        .HasColumnType("character varying(156)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("AnimeVideoKinds");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithoutSeoAddition.CommentReport", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<Guid>("CommentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CommentReportTypeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CommentId");

                    b.HasIndex("CommentReportTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("CommentReports");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithoutSeoAddition.CommentReportType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("CommentReportTypes");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithoutSeoAddition.EmojiGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("EmojiGroups");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithoutSeoAddition.EpisodeImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<int>>("Colors")
                        .HasColumnType("integer[]");

                    b.Property<Guid>("EpisodeId")
                        .HasColumnType("uuid");

                    b.Property<int>("Height")
                        .HasColumnType("integer");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<int>("Width")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EpisodeId");

                    b.ToTable("EpisodeImages");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithoutSeoAddition.ExternalLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnimeId")
                        .HasColumnType("uuid");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.ToTable("ExternalLinks");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithoutSeoAddition.Mediaplayer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("Mediaplayers");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithoutSeoAddition.Provider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AnimeId")
                        .HasColumnType("uuid");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AnimeId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithoutSeoAddition.RelatedType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.HasKey("Id");

                    b.ToTable("RelatedTypes");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithoutSeoAddition.UserSetting", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsAutoNext")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAutoPlay")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAutoSkipIntro")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDub")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPrivateAnimeList")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsRomaji")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Anime", b =>
                {
                    b.HasBaseType("WebApiForHikka.Domain.Models.Commentable");

                    b.Property<float>("AvgDuration")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("FirstAirDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("HowManyEpisodes")
                        .HasColumnType("integer");

                    b.Property<string>("ImageName")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<float>("ImdbScore")
                        .HasColumnType("real");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<Guid>("KindId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastAirDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(156)
                        .HasColumnType("character varying(156)");

                    b.Property<string>("NativeName")
                        .IsRequired()
                        .HasMaxLength(156)
                        .HasColumnType("character varying(156)");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uuid");

                    b.Property<List<int>>("PosterColors")
                        .IsRequired()
                        .HasColumnType("integer[]");

                    b.Property<string>("PosterPath")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTime?>("PublishedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RestrictedRatingId")
                        .HasColumnType("uuid");

                    b.Property<string>("RomajiName")
                        .HasMaxLength(248)
                        .HasColumnType("character varying(248)");

                    b.Property<Guid>("SeoAdditionId")
                        .HasColumnType("uuid");

                    b.Property<long?>("ShikimoriId")
                        .HasColumnType("bigint");

                    b.Property<float>("ShikimoriScore")
                        .HasColumnType("real");

                    b.Property<Guid>("SourceId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid");

                    b.Property<long?>("TmdbId")
                        .HasColumnType("bigint");

                    b.Property<float>("TmdbScore")
                        .HasColumnType("real");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("KindId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("RestrictedRatingId");

                    b.HasIndex("SeoAdditionId");

                    b.HasIndex("SourceId");

                    b.HasIndex("StatusId");

                    b.ToTable("Animes");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Episode", b =>
                {
                    b.HasBaseType("WebApiForHikka.Domain.Models.Commentable");

                    b.Property<DateTime>("AirDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("AnimeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<bool>("IsFiller")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<Guid>("SeoAdditionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasIndex("SeoAdditionId");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithoutSeoAddition.Comment", b =>
                {
                    b.HasBaseType("WebApiForHikka.Domain.Models.Commentable");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.Relation.AnimeRating", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.User", "First")
                        .WithMany()
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Anime", "Second")
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("First");

                    b.Navigation("Second");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.Relation.CollectionAnime", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Collection", "First")
                        .WithMany()
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Anime", "Second")
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("First");

                    b.Navigation("Second");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.Relation.CountryAnime", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Country", "First")
                        .WithMany()
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Anime", "Second")
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("First");

                    b.Navigation("Second");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.Relation.DubAnime", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Dub", "First")
                        .WithMany()
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Anime", "Second")
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("First");

                    b.Navigation("Second");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.Relation.Related", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Anime", "First")
                        .WithMany()
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.WithoutSeoAddition.RelatedType", "RelatedType")
                        .WithMany()
                        .HasForeignKey("RelatedTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.WithoutSeoAddition.AnimeGroup", "Second")
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("First");

                    b.Navigation("RelatedType");

                    b.Navigation("Second");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.Relation.Season", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Anime", "First")
                        .WithMany()
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.WithoutSeoAddition.AnimeGroup", "Second")
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("First");

                    b.Navigation("Second");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.Relation.Similar", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Anime", "First")
                        .WithMany()
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Anime", "Second")
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("First");

                    b.Navigation("Second");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.Relation.TagAnime", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Tag", "First")
                        .WithMany()
                        .HasForeignKey("FirstId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Anime", "Second")
                        .WithMany()
                        .HasForeignKey("SecondId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("First");

                    b.Navigation("Second");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.User", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.WithoutSeoAddition.UserSetting", "UserSetting")
                        .WithMany()
                        .HasForeignKey("UserSettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserSetting");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Collection", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.SeoAddition", "SeoAddition")
                        .WithMany()
                        .HasForeignKey("SeoAdditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeoAddition");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Country", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.SeoAddition", "SeoAddition")
                        .WithMany()
                        .HasForeignKey("SeoAdditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeoAddition");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Dub", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.SeoAddition", "SeoAddition")
                        .WithMany()
                        .HasForeignKey("SeoAdditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeoAddition");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Format", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.SeoAddition", "SeoAddition")
                        .WithMany()
                        .HasForeignKey("SeoAdditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeoAddition");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Kind", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.SeoAddition", "SeoAddition")
                        .WithMany()
                        .HasForeignKey("SeoAdditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeoAddition");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Language", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.SeoAddition", "SeoAddition")
                        .WithMany()
                        .HasForeignKey("SeoAdditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeoAddition");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.LanguageMediaplayer", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Format", "Format")
                        .WithMany()
                        .HasForeignKey("FormatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.WithoutSeoAddition.Mediaplayer", "Mediaplayer")
                        .WithMany()
                        .HasForeignKey("MediaplayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.SeoAddition", "SeoAddition")
                        .WithMany()
                        .HasForeignKey("SeoAdditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");

                    b.Navigation("Format");

                    b.Navigation("Language");

                    b.Navigation("Mediaplayer");

                    b.Navigation("SeoAddition");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Period", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.SeoAddition", "SeoAddition")
                        .WithMany()
                        .HasForeignKey("SeoAdditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeoAddition");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.RestrictedRating", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.SeoAddition", "SeoAddition")
                        .WithMany()
                        .HasForeignKey("SeoAdditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeoAddition");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Source", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.SeoAddition", "SeoAddition")
                        .WithMany()
                        .HasForeignKey("SeoAdditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeoAddition");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Status", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.SeoAddition", "SeoAddition")
                        .WithMany()
                        .HasForeignKey("SeoAdditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeoAddition");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Studio", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.SeoAddition", "SeoAddition")
                        .WithMany()
                        .HasForeignKey("SeoAdditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeoAddition");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Tag", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Tag", "ParentTag")
                        .WithMany("Tags")
                        .HasForeignKey("ParentId");

                    b.HasOne("WebApiForHikka.Domain.Models.SeoAddition", "SeoAddition")
                        .WithMany()
                        .HasForeignKey("SeoAdditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentTag");

                    b.Navigation("SeoAddition");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithoutSeoAddition.AlternativeName", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Anime", "Anime")
                        .WithMany()
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithoutSeoAddition.AnimeBackdrop", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Anime", "Anime")
                        .WithMany()
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithoutSeoAddition.AnimeVideo", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.WithoutSeoAddition.AnimeVideoKind", "AnimeVideoKind")
                        .WithMany()
                        .HasForeignKey("AnimeVideoKindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnimeVideoKind");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithoutSeoAddition.CommentReport", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.WithoutSeoAddition.Comment", "Comment")
                        .WithMany()
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.WithoutSeoAddition.CommentReportType", "CommentReportType")
                        .WithMany()
                        .HasForeignKey("CommentReportTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("CommentReportType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithoutSeoAddition.EpisodeImage", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Episode", "Episode")
                        .WithMany()
                        .HasForeignKey("EpisodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Episode");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithoutSeoAddition.ExternalLink", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Anime", "Anime")
                        .WithMany()
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithoutSeoAddition.Provider", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Anime", "Anime")
                        .WithMany()
                        .HasForeignKey("AnimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Anime");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Anime", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.Commentable", null)
                        .WithOne()
                        .HasForeignKey("WebApiForHikka.Domain.Models.WithSeoAddition.Anime", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Kind", "Kind")
                        .WithMany()
                        .HasForeignKey("KindId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.RestrictedRating", "RestrictedRating")
                        .WithMany()
                        .HasForeignKey("RestrictedRatingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.SeoAddition", "SeoAddition")
                        .WithMany()
                        .HasForeignKey("SeoAdditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.WithSeoAddition.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Kind");

                    b.Navigation("Period");

                    b.Navigation("RestrictedRating");

                    b.Navigation("SeoAddition");

                    b.Navigation("Source");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Episode", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.Commentable", null)
                        .WithOne()
                        .HasForeignKey("WebApiForHikka.Domain.Models.WithSeoAddition.Episode", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.SeoAddition", "SeoAddition")
                        .WithMany()
                        .HasForeignKey("SeoAdditionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SeoAddition");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithoutSeoAddition.Comment", b =>
                {
                    b.HasOne("WebApiForHikka.Domain.Models.Commentable", null)
                        .WithOne()
                        .HasForeignKey("WebApiForHikka.Domain.Models.WithoutSeoAddition.Comment", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.Commentable", "Parent")
                        .WithMany("Comments")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebApiForHikka.Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.Commentable", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("WebApiForHikka.Domain.Models.WithSeoAddition.Tag", b =>
                {
                    b.Navigation("Tags");
                });
#pragma warning restore 612, 618
        }
    }
}
